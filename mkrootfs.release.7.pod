# mkrootfs.release(7) manual page
# See COPYING and COPYRIGHT files for corresponding information.

=pod

=encoding UTF-8

=head1 NAME

mkrootfs.release - prepare release with mkrootfs

=head1 DESCRIPTION

This manual page describes the how to build Zeppe-Lin root filesystem
tarball and prepare the release on GitHub.

=head1 CONFIGURATION

By default, L<mkrootfs(8)> uses F</etc/mkrootfs/config>,
F</etc/pkgmk.conf> and F</etc/pkgman.conf> configuration files.  These
files (if you haven't edited them in your Zeppe-Lin installation)
contain reasonable defaults and can be used to create a root
filesystem with your current built system packages.

If you changed configuration files mentioned above, for example
changed C<CFLAGS> in F</etc/pkgmk.conf> from C<-march=x86_64> to
C<-march=native>, but want to build rootfs for generic x86_64, then
make a copy of F<pkgmk.conf> with your settings and tell
L<mkrootfs(8)> to use it by using C<-x>/C<--pkgmk-config> command-line
options:

	$ sudo mkrootfs -x /etc/mkrootfs/pkgmk.conf ...

You can also edit F</etc/mkrootfs/config> and place the following line:

	PKGMK_CONF=/etc/mkrootfs/pkgmk.conf

Also, use the C<-y>/C<--pkgman-config> option if you want to use your
custom F<pkgman.conf> file, or add the following line to default
mkrootfs' configuration file:

	PKGMAN_CONF=/etc/mkrootfs/pkgman.conf

By default, L<mkrootfs(8)> builds the rootfs in the
F</tmp/rootfs-{DATE}-{ARCH}> directory, and saves build+installation
logs in F</tmp/rootfs-{DATE}-{ARCH}.log>.  This can be changed by
C<-r>/C<--rootfs> and C<-l>/C<--log> command-line options.  Also,
default location can be changed by editing F</etc/mkrootfs/config> as
showed above:

	ROOTFS_DIR=/path/to/my/rootfs
	ROOTFS_LOG=/path/to/my/rootfs.log

Also, by default L<mkrootfs(8)> builds and installs only I<core>
packages.  This can be changed by specifying B<mkrootfs>' command-line
arguments or by declaring C<PACKAGES> variable in
F</etc/mkrootfs/config>.

See L<mkrootfs.config(5)> for more information.

=head1 MAKE TARBALL

=over 2

=item B<Create the root filesystem>

Create the rootfs directory (build and install packages):

	$ sudo mkrootfs -B

In the end, you'll see the report of installed packages and the
message that C<Install transaction done> in case of success.
Otherwise, exit code 1 will be returned.

=item B<Check for missing libraries>

The next step is to check the rootfs for missing libraries of
installed packages:

	$ sudo mkrootfs -C

In case there are some missing libraries, you'll see the broken
packages (hint: add C<-vv> command-line option to see the packages and
their missing dependencies.

Exit code 2 will be returned in this case.

=item B<Compress root filesystem>

Now, prepare the rootfs tarball.

	$ sudo mkrootfs -T

This will compress root filesystem into the C<tar.xz> archive.

=back

Note that you can combine all these steps, like:

	$ sudo mkrootfs -BCT

If you haven't modified rootfs/log/tarball location, B<mkrootfs> will
produce the following files:

=over 8

=item F</tmp/rootfs-{DATE}-{ARCH}>

This is a root filesystem directory.

=item F</tmp/rootfs-{DATE}-{ARCH}.log>

This is a build + installation log file for the prepared above rootfs
directory.

=item F</tmp/rootfs-{DATE}-{ARCH}.tar.xz>

This is a rootfs tarball.

=back

=head1 PREPARE OFFICIAL RELEASE

First, you need to prepare rootfs tarball as described above.  Next,
sign prepared tarball:

	$ gpg --output /tmp/rootfs-{DATE}-{ARCH}.tar.xz.sig \
	--detach-sig /tmp/rootfs-{DATE}-{ARCH}.tar.xz

Create a tag in C<pkgsrc-core> repository (F</usr/src/pkgsrc-core>):

	$ cd /usr/src/pkgsrc-core
	$ PREVTAG=$(git describe --tags --abbrev=0)
	$ CURTAG=$(date +%F)
	$ git tag -a $CURTAG -m $CURTAG
	$ git push
	$ git push --tags

Go to Zeppe-Lin's C<pkgsrc-core> repository on the GitHub and press
C<Draft a new release>(L<https://github.com/zeppe-lin/pkgsrc-core/release/new>).

=over 2

=item *

Select B<Choose a tag> and select the tag you previously created.

=item *

Set B<Release title> the same as the tag.  To describe this release,
prepare the git log for the rootfs tarball:

	$ cd /usr/src/pkgsrc-core
	$ git log --oneline $PREVTAG..$CURTAG . | xclip -selection clipboard

Next, paste the clipboard content into the C<Describe> section on
GitHub.

=item *

Attach previously created rootfs tarball and it's signature.

=item *

Publish the release.

=item *

B<REMEMBER> to update the rootfs' URL in the C<Zeppe-Lin Handbook>
(L<https://github.com/zeppe-lin/handbook>).

Also, after that, regenerate the website:

	$ cd /usr/src/zeppe-lin.github.io
	$ make -j`nproc`
	$ make update
	$ git push

=back

=head1 SEE ALSO

L<mkrootfs(8)>, L<mkrootfs.config(5)>

=cut

# vim: cc=72 tw=70
# End of file.
