#!/bin/sh
# mkrootfs - build customized root filesystem for chroot installation
# See COPYING and COPYRIGHT files for corresponding information.

######################################################################
# Error codes.                                                       #
######################################################################

readonly E_GENERAL=1  # Generic error code
readonly E_BUILD=2    # Error while building rootfs dir
readonly E_REVDEP=3   # Error checking rootfs dir for missing libs
readonly E_TARBALL=4  # Error making rootfs tarball

######################################################################
# Notification helpers.                                              #
######################################################################

# Print information message to stdout.
#   arg $1: the message
info() {
	echo "=======> $1"
}

# Print warning message to stderr.
#   arg $1: the message
warn() {
	info "WARNING: $1" 1>&2
}

# Print error message to stderr.
#   arg $1: the message
error() {
	info "ERROR: $1" 1>&2
}

# Print error message to stderr and terminate the program.
#   arg $1: the message
fatal() {
	echo "mkrootfs: $1" 1>&2
	exit $E_GENERAL
}

######################################################################
# Exit hooks.                                                        #
######################################################################

# Don't warn about unreachable commands in these functions, see
# trap(1p).

# https://www.shellcheck.net/wiki/SC2317
# shellcheck disable=2317
interrupted() {
	echo ""                      1>&2
	echo "=======> Interrupted." 1>&2
	exit $E_GENERAL
}

# shellcheck disable=2317
#atexit() {
	# Remove build artefacts depending on interrupted action?
	# e.g. build -> remove work dir, tar -> remove tarball

	# Do nothing at the moment.
#}

######################################################################
# Mkrootfs' routines.                                                #
######################################################################

run() {
	if [ "$VERBOSE" -ge 2 ]; then
		printf "+ %s\n" "$*" 1>&2
	fi

	"$@"
}

build_rootfs() {
	info "Preparing rootfs directory ($ROOTFS_DIR)"

	run mkdir -p "$ROOTFS_DIR/var/lib/pkg"
	run touch    "$ROOTFS_DIR/var/lib/pkg/db"
	run touch    "$ROOTFS_LOG"

	# Intentional globbing? and wordsplitting.
	# shellcheck disable=SC2086
	run pkgman install \
		--root="$ROOTFS_DIR"                   \
		--config="$PKGMAN_CONF"                \
		--config-append="writelog enabled"     \
		--config-append="logfile $ROOTFS_LOG"  \
		--config-append="logmode append"       \
		--config-append="runscripts no"        \
		--force --deps --group -d              \
		--margs="-cf $PKGMK_CONF"              \
		-- $PACKAGES
}

check_rootfs() {
	info "Checking rootfs ($ROOTFS_DIR) for missing libraries"

	if [ ! -d "$ROOTFS_DIR" ]; then
		fatal "missing rootfs directory: $ROOTFS_DIR"
	fi

	# Intentional word splitting.
	# shellcheck disable=SC2046
	run chroot "$ROOTFS_DIR" revdep \
		$([ "$VERBOSE" -ge 2 ] && echo "-p")
}

make_tarball() {
	info "Preparing rootfs tarball ($ROOTFS_TAR)"

	if [ ! -d "$ROOTFS_DIR" ]; then
		fatal "missing rootfs directory: $ROOTFS_DIR"
	fi

	run tar -cJf "$ROOTFS_TAR" -C "$ROOTFS_DIR" .
	run sync
}

######################################################################
# Command-line helpers.                                              #
######################################################################

print_help() {
	cat <<EOF
Usage: mkrootfs [-BCTVhv] [-c conffile] [-l logfile] [-r rootfsdir]
                [-t tarball] [-x pkgmk_conffile] [-y pkgman_conffile]
                [pkgname ...]
Build customized root filesystem for chroot installation.

Mandatory arguments to long options are mandatory for short options too.
  -B                       prepare rootfs directory
  -C                       check rootfs directory for missing libraries
  -T                       compress rootfs directory
  -r, --rootfs=rootfsdir   specify an alternate rootfs directory
  -t, --tar=tarball        specify an alternate compressed rootfs tarball
  -l, --log=logfile        specify an alternate log file for pkgman
  -c, --config=conffile    specify an alternate configuration file
  -x, --pkgmk-config=pkgmk_conffile
                           specify an alternate configuration file for pkgmk
  -y, --pkgman-config=pkgman_conffile
                           specify an alternate configuration file for pkgman
  -v, --verbose            increase verbosity
  -V, --version            print version and exit
  -h, --help               print help and exit
EOF
}

print_version() {
	echo "mkrootfs @VERSION@"
}

parse_options() {
	if ! _opts=$(getopt -a -n mkrootfs -l "$LOPTS" -o "$SOPTS" -- "$@"); then
		echo "Try 'mkrootfs --help' for more information." 1>&2
		exit $E_GENERAL
	fi
	eval set -- "$_opts"; unset _opts
	while true; do
		case $1 in
		          -B|-C|-T) ACTION="$ACTION $1"          ;;
		       -r|--rootfs) ROOTFS_DIR="$2"     ; shift  ;;
		          -t|--tar) ROOTFS_TAR="$2"     ; shift  ;;
		          -l|--log) ROOTFS_LOG="$2"     ; shift  ;;
		       -c|--config) MKROOTFS_CONF="$2"  ; shift  ;;
		 -x|--pkgmk-config) PKGMK_CONF="$2"     ; shift  ;;
		-y|--pkgman-config) PKGMAN_CONF="$2"    ; shift  ;;
		      -v|--verbose) VERBOSE=$(( VERBOSE + 1 ))   ;;
		      -V|--version) print_version       ; exit 0 ;;
		         -h|--help) print_help          ; exit 0 ;;
		                --) shift               ; break  ;;
		esac
		shift
	done
	PACKAGES=${*:-$PACKAGES}
}

main() {
	parse_options "$@"

	if [ ! "$ACTION" ]; then
		fatal "option -B and/or -C and/or -T must be specified"
	fi

	if [ "$(id -u)" != 0 ]; then
		fatal "must be run as root"
	fi

	if [ ! -f "$MKROOTFS_CONF" ]; then
		warn "Configuration file '$MKROOTFS_CONF' not found, use defaults"
	else
		# Intentional.
		# https://www.shellcheck.net/wiki/SC1091
		# shellcheck disable=1090
		. "$MKROOTFS_CONF"
	fi

	if [ ! -f "$PKGMK_CONF" ]; then
		error "pkgmk's config '$PKGMK_CONF' not found"
		exit $E_GENERAL
	fi

	if [ ! -f "$PKGMAN_CONF" ]; then
		error "pkgman's config '$PKGMAN_CONF' not found"
		exit $E_GENERAL
	fi

	# Sort actions if mixed and execute them by order: -B, -C, -T.
	for _ACT in $(echo "$ACTION" | sed 's/-[BCT]/&\n/g' | sort); do
		case $_ACT in
		-B) build_rootfs || exit $E_BUILD   ;;
		-C) check_rootfs || exit $E_REVDEP  ;;
		-T) make_tarball || exit $E_TARBALL ;;
		esac
	done
}

######################################################################

# -e: Exit if command return status greater than 0.
# -f: Disable globbing *?[].
set -ef

# Set exit hook.
trap "interrupted" HUP INT QUIT TERM
#trap "atexit"      EXIT

# Globals.
export LC_ALL=POSIX
LOPTS="rootfs:,tar:,log:,config:,pkgmk-config:,pkgman-config:,verbose,version,help"
SOPTS="BCTr:t:l:c:x:y:vVh"
ROOTFS_DIR=${TMPDIR:-/tmp}/rootfs-$(date +%F)-$(uname -m)
ROOTFS_TAR=$ROOTFS_DIR.tar.xz
ROOTFS_LOG=$ROOTFS_DIR.log
MKROOTFS_CONF=/etc/mkrootfs/config
PKGMK_CONF=/etc/pkgmk.conf
PKGMAN_CONF=/etc/pkgman.conf
VERBOSE=0
PACKAGES=$(pkgman printf %n\\n \
  --no-std-config --config-set="pkgsrcdir /usr/src/pkgsrc-core")

######################################################################

main "$@"

# vim: cc=72 tw=70
# End of file.
