#!/bin/sh

######################################################################
# error codes                                                        #
######################################################################

readonly E_GENERAL=1  # Generic error code
readonly E_BUILD=2    # Error while building rootfs dir
readonly E_REVDEP=3   # Error checking rootfs dir for missing libs
readonly E_TARBALL=4  # Error making rootfs tarball

######################################################################
# notification helpers                                               #
######################################################################

info() {
  echo "=======> $1"
}

warn() {
  info "WARNING: $1" >&2
}

error() {
  info "ERROR: $1" >&2
}

fatal() {
  echo "mkrootfs: $1" >&2
  exit $E_GENERAL
}

######################################################################
# mkrootfs' routines                                                 #
######################################################################

run() {
  [ $VERBOSE -ge 2 ] && printf "+ %s\n" "$*" >&2
  "$@"
}

build_rootfs() {
  info "Preparing rootfs directory ($ROOTFS_DIR)"

  run mkdir -p "$ROOTFS_DIR/var/lib/pkg"
  run touch    "$ROOTFS_DIR/var/lib/pkg/db"
  run touch    "$ROOTFS_LOG"

  # Intentional.
  # shellcheck disable=SC2086
  run pkgman install \
    --root="$ROOTFS_DIR"                   \
    --config="$PKGMAN_CONF"                \
    --config-append="writelog enabled"     \
    --config-append="logfile $ROOTFS_LOG"  \
    --config-append="logmode append"       \
    --config-append="runscripts no"        \
    --force --deps --group -d              \
    --margs="-cf $PKGMK_CONF"              \
    -- $PACKAGES
}

check_rootfs() {
  info "Checking rootfs ($ROOTFS_DIR) for missing libraries"

  [ -d "$ROOTFS_DIR" ] || fatal "missing rootfs directory: $ROOTFS_DIR"

  run chroot "$ROOTFS_DIR" revdep $([ $VERBOSE -ge 2 ] && echo "-P")
}

make_tarball() {
  info "Preparing rootfs tarball ($ROOTFS_TAR)"

  [ -d "$ROOTFS_DIR" ] || fatal "missing rootfs directory: $ROOTFS_DIR"

  run tar -cJf "$ROOTFS_TAR" -C "$ROOTFS_DIR" .
  run sync
}

######################################################################
# main and its helpers                                               #
######################################################################

print_help() {
  cat <<EOF
Usage: mkrootfs [COMMAND]... [OPTIONS]... [PKGNAME]...
Build customized root filesystem for chroot installation.

COMMANDS:
  -B    prepare rootfs directory
  -C    check rootfs directory for missing libraries
  -T    compress rootfs directory (prepare tarball)

OPTIONS:
  Mandatory arguments to long options are mandatory for short options too.

  -r, --rootfs=PATH            set path to rootfs directory
  -t, --tar=FILE               set path to compressed rootfs tarball
  -l, --log=FILE               set pkgman's log output file
  -c, --config=FILE            set path to configuration file
  -x, --pkgmk-config=FILE      set path to pkgmk's configuration file
  -y, --pkgman-config=FILE     set path to pkgman's configuration file
  -v, --verbose                increase verbosity
  -V, --version                print version and exit
  -h, --help                   print help and exit
EOF
}

print_version() {
  echo "mkrootfs @VERSION@"
}

parse_options() {
  eval set -- "$(getopt -n "mkrootfs" -a \
    -l "rootfs:,tar:,log:,config:,pkgmk-config:,pkgman-config:,verbose,version,help" \
    -o ":BCTr:t:l:c:x:y:vVh" -- "$@"
  )"

  while true; do
    case $1 in
              -B|-C|-T) ACTION="$ACTION $1"          ;;
           -r|--rootfs) ROOTFS_DIR="$2"     ; shift  ;;
              -t|--tar) ROOTFS_TAR="$2"     ; shift  ;;
              -l|--log) ROOTFS_LOG="$2"     ; shift  ;;
           -c|--config) MKROOTFS_CONF="$2"  ; shift  ;;
     -x|--pkgmk-config) PKGMK_CONF="$2"     ; shift  ;;
    -y|--pkgman-config) PKGMAN_CONF="$2"    ; shift  ;;
          -v|--verbose) VERBOSE=$(( VERBOSE + 1 ))   ;;
          -V|--version) print_version       ; exit 0 ;;
             -h|--help) print_help          ; exit 0 ;;
                    --) shift               ; break  ;;
                     *) fatal "unknown option: $1"   ;;
    esac
    shift
  done

  [ "$ACTION" ] || fatal "action (-B|-C|-T) must be specified"

  PACKAGES=${*:-$PACKAGES}
}

main() {
  parse_options "$@"

  [ "$(id -u)" = 0 ] || fatal "must be run as root"

  if [ ! -f "$MKROOTFS_CONF" ]; then
    warn "Configuration file '$MKROOTFS_CONF' not found, use defaults"
  else
    # shellcheck source="/etc/mkrootfs/config"
    . "$MKROOTFS_CONF"
  fi

  if [ ! -f "$PKGMK_CONF" ]; then
    error "pkgmk's config '$PKGMK_CONF' not found"
    exit $E_GENERAL
  fi

  if [ ! -f "$PKGMAN_CONF" ]; then
    error "pkgman's config '$PKGMAN_CONF' not found"
    exit $E_GENERAL
  fi

  # sort actions if mixed and execute them by order: -B, -C, -T
  for _ACT in $(echo "$ACTION" | sed 's/-[BCT]/&\n/g' | sort); do
    case $_ACT in
    -B) build_rootfs || exit $E_BUILD   ;;
    -C) check_rootfs || exit $E_REVDEP  ;;
    -T) make_tarball || exit $E_TARBALL ;;
    esac
  done
}

interrupted() {
  echo "" >&2
  error "Interrupted."
}

######################################################################
# default configuration                                              #
######################################################################

# Exit if command fails.
set -e

# Set exit hook.
trap "interrupted" HUP INT QUIT TERM

# Globals.
export LC_ALL=POSIX
ROOTFS_DIR=${TMPDIR:-/tmp}/rootfs-$(date +%F)-$(uname -m)
ROOTFS_TAR=$ROOTFS_DIR.tar.xz
ROOTFS_LOG=$ROOTFS_DIR.log
MKROOTFS_CONF=/etc/mkrootfs/config
PKGMK_CONF=/etc/pkgmk.conf
PKGMAN_CONF=/etc/pkgman.conf
VERBOSE=0
PACKAGES=$(pkgman printf %n\\n \
  --no-std-config --config-set="pkgsrcdir /usr/src/pkgsrc-core")

main "$@"

# vim:ft=sh:sw=2:ts=2:sts=2:et:cc=72:tw=70
# End of file.
